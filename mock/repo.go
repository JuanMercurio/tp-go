// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juanmercurio/tp-go/internal/ports (interfaces: RepositorioMonedas)

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/juanmercurio/tp-go/internal/core/domain"
	ports "github.com/juanmercurio/tp-go/internal/ports"
)

// MockRepositorioMonedas is a mock of RepositorioMonedas interface.
type MockRepositorioMonedas struct {
	ctrl     *gomock.Controller
	recorder *MockRepositorioMonedasMockRecorder
}

// MockRepositorioMonedasMockRecorder is the mock recorder for MockRepositorioMonedas.
type MockRepositorioMonedasMockRecorder struct {
	mock *MockRepositorioMonedas
}

// NewMockRepositorioMonedas creates a new mock instance.
func NewMockRepositorioMonedas(ctrl *gomock.Controller) *MockRepositorioMonedas {
	mock := &MockRepositorioMonedas{ctrl: ctrl}
	mock.recorder = &MockRepositorioMonedasMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositorioMonedas) EXPECT() *MockRepositorioMonedasMockRecorder {
	return m.recorder
}

// AltaCotizacion mocks base method.
func (m *MockRepositorioMonedas) AltaCotizacion(arg0 domain.Cotizacion) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AltaCotizacion", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AltaCotizacion indicates an expected call of AltaCotizacion.
func (mr *MockRepositorioMonedasMockRecorder) AltaCotizacion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AltaCotizacion", reflect.TypeOf((*MockRepositorioMonedas)(nil).AltaCotizacion), arg0)
}

// AltaCotizaciones mocks base method.
func (m *MockRepositorioMonedas) AltaCotizaciones(arg0 []domain.Cotizacion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AltaCotizaciones", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AltaCotizaciones indicates an expected call of AltaCotizaciones.
func (mr *MockRepositorioMonedasMockRecorder) AltaCotizaciones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AltaCotizaciones", reflect.TypeOf((*MockRepositorioMonedas)(nil).AltaCotizaciones), arg0)
}

// AltaMoneda mocks base method.
func (m *MockRepositorioMonedas) AltaMoneda(arg0 domain.Criptomoneda) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AltaMoneda", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AltaMoneda indicates an expected call of AltaMoneda.
func (mr *MockRepositorioMonedasMockRecorder) AltaMoneda(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AltaMoneda", reflect.TypeOf((*MockRepositorioMonedas)(nil).AltaMoneda), arg0)
}

// BuscarPorId mocks base method.
func (m *MockRepositorioMonedas) BuscarPorId(arg0 int) (domain.Criptomoneda, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuscarPorId", arg0)
	ret0, _ := ret[0].(domain.Criptomoneda)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuscarPorId indicates an expected call of BuscarPorId.
func (mr *MockRepositorioMonedasMockRecorder) BuscarPorId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuscarPorId", reflect.TypeOf((*MockRepositorioMonedas)(nil).BuscarPorId), arg0)
}

// BuscarTodos mocks base method.
func (m *MockRepositorioMonedas) BuscarTodos() ([]domain.Criptomoneda, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuscarTodos")
	ret0, _ := ret[0].([]domain.Criptomoneda)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuscarTodos indicates an expected call of BuscarTodos.
func (mr *MockRepositorioMonedasMockRecorder) BuscarTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuscarTodos", reflect.TypeOf((*MockRepositorioMonedas)(nil).BuscarTodos))
}

// Cotizaciones mocks base method.
func (m *MockRepositorioMonedas) Cotizaciones(arg0 ports.ParamCotizaciones) ([]domain.Cotizacion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cotizaciones", arg0)
	ret0, _ := ret[0].([]domain.Cotizacion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cotizaciones indicates an expected call of Cotizaciones.
func (mr *MockRepositorioMonedasMockRecorder) Cotizaciones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cotizaciones", reflect.TypeOf((*MockRepositorioMonedas)(nil).Cotizaciones), arg0)
}

// Simbolos mocks base method.
func (m *MockRepositorioMonedas) Simbolos() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Simbolos")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Simbolos indicates an expected call of Simbolos.
func (mr *MockRepositorioMonedasMockRecorder) Simbolos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Simbolos", reflect.TypeOf((*MockRepositorioMonedas)(nil).Simbolos))
}

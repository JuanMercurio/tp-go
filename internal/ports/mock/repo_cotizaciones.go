// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juanmercurio/tp-go/internal/ports (interfaces: RepositorioCotizaciones)
//
// Generated by this command:
//
//	mockgen --destination=./mock/repo_cotizaciones.go github.com/juanmercurio/tp-go/internal/ports RepositorioCotizaciones
//

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/juanmercurio/tp-go/internal/core/domain"
	ports "github.com/juanmercurio/tp-go/internal/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositorioCotizaciones is a mock of RepositorioCotizaciones interface.
type MockRepositorioCotizaciones struct {
	ctrl     *gomock.Controller
	recorder *MockRepositorioCotizacionesMockRecorder
}

// MockRepositorioCotizacionesMockRecorder is the mock recorder for MockRepositorioCotizaciones.
type MockRepositorioCotizacionesMockRecorder struct {
	mock *MockRepositorioCotizaciones
}

// NewMockRepositorioCotizaciones creates a new mock instance.
func NewMockRepositorioCotizaciones(ctrl *gomock.Controller) *MockRepositorioCotizaciones {
	mock := &MockRepositorioCotizaciones{ctrl: ctrl}
	mock.recorder = &MockRepositorioCotizacionesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositorioCotizaciones) EXPECT() *MockRepositorioCotizacionesMockRecorder {
	return m.recorder
}

// ActualizarCotizacionMap mocks base method.
func (m *MockRepositorioCotizaciones) ActualizarCotizacionMap(arg0, arg1 int, arg2 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualizarCotizacionMap", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActualizarCotizacionMap indicates an expected call of ActualizarCotizacionMap.
func (mr *MockRepositorioCotizacionesMockRecorder) ActualizarCotizacionMap(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualizarCotizacionMap", reflect.TypeOf((*MockRepositorioCotizaciones)(nil).ActualizarCotizacionMap), arg0, arg1, arg2)
}

// AltaCotizacion mocks base method.
func (m *MockRepositorioCotizaciones) AltaCotizacion(arg0 domain.Cotizacion) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AltaCotizacion", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AltaCotizacion indicates an expected call of AltaCotizacion.
func (mr *MockRepositorioCotizacionesMockRecorder) AltaCotizacion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AltaCotizacion", reflect.TypeOf((*MockRepositorioCotizaciones)(nil).AltaCotizacion), arg0)
}

// AltaCotizacionManual mocks base method.
func (m *MockRepositorioCotizaciones) AltaCotizacionManual(arg0 int, arg1 domain.Cotizacion) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AltaCotizacionManual", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AltaCotizacionManual indicates an expected call of AltaCotizacionManual.
func (mr *MockRepositorioCotizacionesMockRecorder) AltaCotizacionManual(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AltaCotizacionManual", reflect.TypeOf((*MockRepositorioCotizaciones)(nil).AltaCotizacionManual), arg0, arg1)
}

// BajaCotizacionManual mocks base method.
func (m *MockRepositorioCotizaciones) BajaCotizacionManual(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BajaCotizacionManual", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BajaCotizacionManual indicates an expected call of BajaCotizacionManual.
func (mr *MockRepositorioCotizacionesMockRecorder) BajaCotizacionManual(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BajaCotizacionManual", reflect.TypeOf((*MockRepositorioCotizaciones)(nil).BajaCotizacionManual), arg0)
}

// CotizacionPorId mocks base method.
func (m *MockRepositorioCotizaciones) CotizacionPorId(arg0 int) (domain.Cotizacion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CotizacionPorId", arg0)
	ret0, _ := ret[0].(domain.Cotizacion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CotizacionPorId indicates an expected call of CotizacionPorId.
func (mr *MockRepositorioCotizacionesMockRecorder) CotizacionPorId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CotizacionPorId", reflect.TypeOf((*MockRepositorioCotizaciones)(nil).CotizacionPorId), arg0)
}

// Cotizaciones mocks base method.
func (m *MockRepositorioCotizaciones) Cotizaciones(arg0 ports.Filter) (int, []domain.Cotizacion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cotizaciones", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]domain.Cotizacion)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Cotizaciones indicates an expected call of Cotizaciones.
func (mr *MockRepositorioCotizacionesMockRecorder) Cotizaciones(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cotizaciones", reflect.TypeOf((*MockRepositorioCotizaciones)(nil).Cotizaciones), arg0)
}

// EsCotizacionManual mocks base method.
func (m *MockRepositorioCotizaciones) EsCotizacionManual(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EsCotizacionManual", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EsCotizacionManual indicates an expected call of EsCotizacionManual.
func (mr *MockRepositorioCotizacionesMockRecorder) EsCotizacionManual(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EsCotizacionManual", reflect.TypeOf((*MockRepositorioCotizaciones)(nil).EsCotizacionManual), arg0)
}

// Resumen mocks base method.
func (m *MockRepositorioCotizaciones) Resumen(arg0 ports.Filter) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resumen", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Resumen indicates an expected call of Resumen.
func (mr *MockRepositorioCotizacionesMockRecorder) Resumen(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resumen", reflect.TypeOf((*MockRepositorioCotizaciones)(nil).Resumen), arg0)
}
